//jquery for toggle dropdown menus
     $(document).ready(function(){
        //toggle sub-menus
        $(".sub-btn").click(function(){
            $(this).next(".sub-menu").slideToggle();
        });
     });

     //javascript for resposive navigation menu
     var menu = document.querySelector(".menu");
     var kaca = document.querySelector(".container-blur");
     var menuBtn = document.querySelector(".menu-btn");
     var closeBtn = document.querySelector(".close-btn");

     menuBtn.addEventListener("click", () => {
        menu.classList.add("active");
        kaca.classList.add("active");
     });

     closeBtn.addEventListener("click", () => {
        menu.classList.remove("active");
        kaca.classList.remove("active");
     });

     kaca.addEventListener("click", () => {
      menu.classList.remove("active");
      kaca.classList.remove("active");
   });

     //javascript for img
   //   var elementclose = document.getElementsByClassName('card-galeri-jurusan-overlay');

   //   for ( let i = 0; i< elementclose.length; i++){
   //    elementclose[i].addEventListener('click',function(){
   //       let url = window.location.href.substring(0,window.location.href.indexOf('#'))
   //       window.location = url;
   //    });
   //   }
     
     var gambarbtn = document.querySelector(".card-galeri-jurusan");
     var gambarbtn2 = document.querySelector(".card-galeri-jurusan-2");
     var gambarbtn3 = document.querySelector(".card-galeri-jurusan-3");
     var gambar = document.querySelector(".card-galeri-jurusan-overlay");
     var gambar2 = document.querySelector(".card-galeri-jurusan-overlay-2");
     var gambar3 = document.querySelector(".card-galeri-jurusan-overlay-3");
     var close = document.querySelector(".close-gambar");
     var close2 = document.querySelector(".close-gambar-2");
     var close3 = document.querySelector(".close-gambar-3");

     gambarbtn.addEventListener("click", () => {
      gambar.classList.add("active");
     });
     
     gambarbtn2.addEventListener("click", () => {
      gambar2.classList.add("active");
     });

     gambarbtn3.addEventListener("click", () => {
      gambar3.classList.add("active");
     });

     close.addEventListener("click", () => {
       gambar.classList.remove("active");
     });
     gambar.addEventListener("click", () => {
      gambar.classList.remove("active");
    });

     close2.addEventListener("click", () => {
      gambar2.classList.remove("active");
    });
    gambar2.addEventListener("click", () => {
      gambar2.classList.remove("active");
    });

    close3.addEventListener("click", () => {
      gambar3.classList.remove("active");
    });
    gambar3.addEventListener("click", () => {
      gambar3.classList.remove("active");
    });



    // /////////
    const wrapper = document.querySelector(".wrapper");
const carousel = document.querySelector(".carousel-seragam");
const firstCardWidth = carousel.querySelector(".card-seragam").offsetWidth;
const arrowBtns = document.querySelectorAll(".wrapper i");
const carouselChildrens = [...carousel.children];

let isDragging = false, isAutoPlay = true, startX, startScrollLeft, timeoutId;

// Get the number of cards that can fit in the carousel at once
let cardPerView = Math.round(carousel.offsetWidth / firstCardWidth);

// Insert copies of the last few cards to beginning of carousel for infinite scrolling
carouselChildrens.slice(-cardPerView).reverse().forEach(card => {
    carousel.insertAdjacentHTML("afterbegin", card.outerHTML);
});

// Insert copies of the first few cards to end of carousel for infinite scrolling
carouselChildrens.slice(0, cardPerView).forEach(card => {
    carousel.insertAdjacentHTML("beforeend", card.outerHTML);
});

// Scroll the carousel at appropriate postition to hide first few duplicate cards on Firefox
carousel.classList.add("no-transition");
carousel.scrollLeft = carousel.offsetWidth;
carousel.classList.remove("no-transition");

// Add event listeners for the arrow buttons to scroll the carousel left and right
arrowBtns.forEach(btn => {
    btn.addEventListener("click", () => {
        carousel.scrollLeft += btn.id == "left" ? -firstCardWidth : firstCardWidth;
    });
});

const dragStart = (e) => {
    isDragging = true;
    carousel.classList.add("dragging");
    // Records the initial cursor and scroll position of the carousel
    startX = e.pageX;
    startScrollLeft = carousel.scrollLeft;
}

const dragging = (e) => {
    if(!isDragging) return; // if isDragging is false return from here
    // Updates the scroll position of the carousel based on the cursor movement
    carousel.scrollLeft = startScrollLeft - (e.pageX - startX);
}

const dragStop = () => {
    isDragging = false;
    carousel.classList.remove("dragging");
}

const infiniteScroll = () => {
    // If the carousel is at the beginning, scroll to the end
    if(carousel.scrollLeft === 0) {
        carousel.classList.add("no-transition");
        carousel.scrollLeft = carousel.scrollWidth - (2 * carousel.offsetWidth);
        carousel.classList.remove("no-transition");
    }
    // If the carousel is at the end, scroll to the beginning
    else if(Math.ceil(carousel.scrollLeft) === carousel.scrollWidth - carousel.offsetWidth) {
        carousel.classList.add("no-transition");
        carousel.scrollLeft = carousel.offsetWidth;
        carousel.classList.remove("no-transition");
    }

    // Clear existing timeout & start autoplay if mouse is not hovering over carousel
    clearTimeout(timeoutId);
    if(!wrapper.matches(":hover")) autoPlay();
}

const autoPlay = () => {
    if(window.innerWidth < 800 || !isAutoPlay) return; // Return if window is smaller than 800 or isAutoPlay is false
    // Autoplay the carousel after every 2500 ms
    timeoutId = setTimeout(() => carousel.scrollLeft += firstCardWidth, 2500);
}
autoPlay();

carousel.addEventListener("mousedown", dragStart);
carousel.addEventListener("mousemove", dragging);
document.addEventListener("mouseup", dragStop);
carousel.addEventListener("scroll", infiniteScroll);
wrapper.addEventListener("mouseenter", () => clearTimeout(timeoutId));
wrapper.addEventListener("mouseleave", autoPlay);
    

     

